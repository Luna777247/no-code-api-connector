{"timestamp":"2025-10-25T04:33:27.297012Z","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager","filename":"manager.py","lineno":179}
{"timestamp":"2025-10-25T04:33:27.298307Z","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/schedule_dag_generator.py","logger":"airflow.models.dagbag.DagBag","filename":"dagbag.py","lineno":593}
{"timestamp":"2025-10-25T04:33:29.536669Z","level":"info","event":"[DAG Generator] Invalid connection ID format: conn_1760900635551_e1ik9kycx, skipping schedule","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:29.753711Z","level":"info","event":"[DAG Generator] Connection not found: 68fb174656bf68b61b0d9dd5","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:29.965723Z","level":"info","event":"[DAG Generator] Connection not found: 68fb174756bf68b61b0d9dd7","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:30.183359Z","level":"info","event":"[DAG Generator] Invalid connection ID format: test_conn_aot, skipping schedule","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:30.183823Z","level":"info","event":"[DAG Generator] Invalid connection ID format: test_conn_aot, skipping schedule","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:31.055052Z","level":"info","event":"[DAG Generator] Generated 4 DAGs from schedules","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:31.272296Z","level":"warning","event":"The `airflow.operators.python.PythonOperator` attribute is deprecated. Please use `'airflow.providers.standard.operators.python.PythonOperator'`.","category":"DeprecatedImportWarning","filename":"/opt/airflow/dags/schedule_dag_generator.py","lineno":7,"logger":"py.warnings"}
{"timestamp":"2025-10-25T04:33:31.302472Z","level":"info","event":"Task instance is in running state","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:31.303181Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:31.303782Z","level":"info","event":"Current task name:execute_api","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:31.304302Z","level":"info","event":"Dag name:api_schedule_68fc4c824a46b382e1020b43","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:31.305748Z","level":"info","event":"[Airflow] Executing API call for schedule: 68fc4c824a46b382e1020b43","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:33.479302Z","level":"info","event":"[Airflow] API call completed: success","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:33.698224Z","level":"info","event":"Done. Returned value was: {'scheduleId': '68fc4c824a46b382e1020b43', 'connectionId': '68fc4c734a46b382e1020b42', 'status': 'success', 'statusCode': 200, 'duration': 0, 'recordsProcessed': 0, 'executedAt': '2025-10-25T04:33:32.003976', 'triggeredBy': 'airflow_scheduler', 'responseSize': 419071, '_id': '68fc531c8c7d620f54d44ff0'}","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator","filename":"python.py","lineno":218}
{"timestamp":"2025-10-25T04:33:33.698566Z","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('019a199f-fc12-7455-90b3-7ba581cc9fa7'), task_id='execute_api', dag_id='api_schedule_68fc4c824a46b382e1020b43', run_id='manual__2025-10-25T04:26:41.193484+00:00_M1He41gX', try_number=2, dag_version_id=UUID('019a199c-5276-7c81-89a0-934f92dc7863'), map_index=-1, hostname='b22b62853d56', context_carrier={}, task=<Task(PythonOperator): execute_api>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=3, start_date=datetime.datetime(2025, 10, 25, 4, 33, 26, 883354, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task","filename":"task_runner.py","lineno":1352}
{"timestamp":"2025-10-25T04:33:33.746816Z","level":"info","event":"Task instance in success state","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:33.747494Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","logger":"task.stdout"}
{"timestamp":"2025-10-25T04:33:33.748100Z","level":"info","event":"Task operator:<Task(PythonOperator): execute_api>","logger":"task.stdout"}
